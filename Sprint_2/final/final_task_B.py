# id package is 69334118

"""
-- ПРИНЦИП РАБОТЫ --
Калькулятор сделан с использованием стека.

Стек - это список элементов организованных по принципу LIFO.

Полученная строка делится на символы через пробелы.
Если по ходу прочтения строки на вход подаётся операнд, то он добавляется на вершину стека,
иначе если это знак операции, то с вершины стека извлекаются два значения и
производится арифмитическая операция и результат добавляется на вершину стека.

Если на момент извлечения стек пуст, то вызывается исключение IndexError.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Из описания алгоритма следует, что чем позже элемент добавился в стек,
тем раньше он будет оттуда извлечен.

Стек хранит элементы в том порядке, в каком они были добавлены.
Таким образом, каждая пара чисел будет извлекаться для текущей операции корректно,
без нарушения последовательности выполнения арифмитического примера.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Добавление в стек стоит O(1).
Извлечение из стека стоит O(1), когда структура не пуста.

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Стек, содержащий n элементов, занимает O(n) памяти.
"""

import operator


class Stack:
    def __init__(self):
        self.items = []
        self.length = 0

    def push(self, item: int):
        self.length += 1
        self.items.append(item)

    def pop(self):
        if self.length == 0:
            raise IndexError

        self.length -= 1
        return self.items.pop()


def main(commands: str):
    s = Stack()
    operations = {
        "+": operator.add,
        "-": operator.sub,
        "*": operator.mul,
        "/": operator.floordiv,
    }
    for char in commands.split(' '):
        if char in operations:
            n1 = s.pop()
            n2 = s.pop()
            s.push(operations[char](n2, n1))
        else:
            s.push(int(char))

    return str(s.pop())


if __name__ == '__main__':
    commands = input()
    print(main(commands))
